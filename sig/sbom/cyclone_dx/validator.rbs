module SBOM
  module CycloneDX
    module Validator
      type anyValidator =
        ArrayValidator
      | BooleanValidator
      | DateTimeValidator
      | EmailAddressValidator
      | FloatValidator
      | IntegerValidator
      | RecordValidator
      | StringValidator
      | UnionValidator
      | URIValidator

      type arrayValidatorParams = { items: ^(untyped) -> bool | fieldTypeLabel | arrayItemValidatorParams, ?unique: bool, ?const: Array[fieldValue], ?required: bool }
      type booleanValidatorParams = { ?const: bool, ?required: bool }
      type dateTimeValidatorParams = { ?const: dateTime, ?required: bool }
      type emailAddressValidatorParams = { ?const: emailAddress, ?required: bool }
      type floatValidatorParams = { ?const: Float, ?maximum: number?, ?minimum: number, ?required: bool }
      type integerValidatorParams = { ?const: Integer, ?maximum: Integer, ?minimum: Integer, ?required: bool }
      type recordValidatorParams = { ?const: Record::Base, type: Class & Record::_Klass, ?required: bool }
      type stringValidatorParams = { ?const: String, ?enum: Array[String], ?max_length: Integer?, ?min_length: Integer?, ?pattern: Regexp, ?required: bool }
      type unionValidatorParams = { ?const: fieldValue, of: Array[UnionValidator::unionableValidatorParams], ?required: bool }
      type uriValidatorParams = { ?const: uri, ?required: bool }
      type anyValidatorParams =
        arrayValidatorParams
      | booleanValidatorParams
      | dateTimeValidatorParams
      | emailAddressValidatorParams
      | floatValidatorParams
      | integerValidatorParams
      | recordValidatorParams
      | stringValidatorParams
      | unionValidatorParams
      | uriValidatorParams

      type arrayItemValidatorParams =
        [:array, arrayValidatorParams]
      | [:boolean, booleanValidatorParams]
      | [:date_time, dateTimeValidatorParams]
      | [:email_address, emailAddressValidatorParams]
      | [:float, floatValidatorParams]
      | [:integer, integerValidatorParams]
      | [Class & Record::_Klass, recordValidatorParams]
      | [:string, stringValidatorParams]
      | [:union, unionValidatorParams]
      | [:uri, uriValidatorParams]

      def self.for:
        (:array type, **untyped) -> ArrayValidator
      | (:boolean type, **untyped) -> BooleanValidator
      | (:date_time type, **untyped) -> DateTimeValidator
      | (:email_address type, **untyped) -> EmailAddressValidator
      | (:float type, **untyped) -> FloatValidator
      | (:integer type, **untyped) -> IntegerValidator
      | (::Class & ::SBOM::CycloneDX::Record::_Klass type, **untyped) -> RecordValidator
      | (:string type, **untyped) -> StringValidator
      | (:union type, **untyped) -> UnionValidator
      | (:uri type, **untyped) -> URIValidator
      | (fieldTypeLabel type, **untyped) -> BaseValidator[untyped]
    end
  end
end
