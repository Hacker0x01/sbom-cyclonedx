module SBOM
  module CycloneDX
    module Record
      class Annotation < Base
        class Annotator < Base
          def initialize: (?organization: OrganizationalEntity?, ?individual: OrganizationalContact?, ?component: Component?, ?service: Service?) -> void

          def organization: () -> OrganizationalEntity?
          def organization=: (OrganizationalEntity?) -> OrganizationalEntity?
          def organization?: () -> bool
          def organization_valid?: () -> bool

          def individual: () -> OrganizationalContact?
          def individual=: (OrganizationalContact?) -> OrganizationalContact?
          def individual?: () -> bool
          def individual_valid?: () -> bool

          def component: () -> Component?
          def component=: (Component?) -> Component?
          def component?: () -> bool
          def component_valid?: () -> bool

          def service: () -> Service?
          def service=: (Service?) -> Service?
          def service?: () -> bool
          def service_valid?: () -> bool
        end

        def initialize: (?bom_ref: String?, subjects: Array[String], annotator: Annotator, timestamp: dateTime, text: String, ?signature: Signature::signatureChoice?) -> void

        def bom_ref: () -> String?
        def bom_ref=: (String?) -> String?
        def bom_ref?: () -> bool
        def bom_ref_valid?: () -> bool

        def subjects: () -> Array[String]
        def subjects=: (Array[String]) -> Array[String]
        def subjects?: () -> bool
        def subjects_valid?: () -> bool

        def annotator: () -> Annotator
        def annotator=: (Annotator) -> Annotator
        def annotator?: () -> bool
        def annotator_valid?: () -> bool

        def timestamp: () -> dateTime
        def timestamp=: (dateTime) -> dateTime
        def timestamp?: () -> bool
        def timestamp_valid?: () -> bool

        def text: () -> String
        def text=: (String) -> String
        def text?: () -> bool
        def text_valid?: () -> bool

        def signature: () -> Signature::signatureChoice?
        def signature=: (Signature::signatureChoice?) -> Signature::signatureChoice?
        def signature?: () -> bool
        def signature_valid?: () -> bool
      end
    end
  end
end
