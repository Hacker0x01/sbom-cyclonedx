module SBOM
  module CycloneDX
    module Record
      class Base
        include Comparable
        include _Instance
        extend _Klass

        @errors: Hash[Symbol | String, Array[String]]

        def <=>: (untyped other) -> Integer?

        private def populate_fields: (**untyped) -> void
        private def populate_consts_and_defaults: () -> void
        private def json_name: (Symbol) -> String
        private def validator_for: (Symbol) -> SBOM::CycloneDX::Validator::BaseValidator[fieldValue]
        private def validate_value: (Symbol) -> Array[String]
        private def validate_custom: (*Symbol, ?message: String?) { (*fieldValue?) -> (bool? | String | Array[String]) } -> Array[String]

        self.@json_name_map: Hash[Symbol, String]
        self.@fields: Hash[Symbol, SBOM::CycloneDX::Field::Base[untyped]]
        self.@custom_validators: Array[[Array[Symbol], String?, ^(*fieldValue?) -> (bool? | String | Array[String])]]

        private def self.in_subclass_body?: () -> bool
        private def self.json_name_map: () -> Hash[Symbol, String]
        private def self.build_prop:
          (Symbol, :array, Validator::arrayValidatorParams, ?required: bool) -> void
        | (Symbol, :boolean, Validator::booleanValidatorParams, ?required: bool) -> void
        | (Symbol, :date_time, Validator::dateTimeValidatorParams, ?required: bool) -> void
        | (Symbol, :email_address, Validator::emailAddressValidatorParams, ?required: bool) -> void
        | (Symbol, :float, Validator::floatValidatorParams, ?required: bool) -> void
        | (Symbol, :integer, Validator::integerValidatorParams, ?required: bool) -> void
        | (Symbol, Class & _Klass, Validator::recordValidatorParams, ?required: bool) -> void
        | (Symbol, :string, Validator::stringValidatorParams, ?required: bool) -> void
        | (Symbol, :union, Validator::unionValidatorParams, ?required: bool) -> void
        | (Symbol, :uri, Validator::uriValidatorParams, ?required: bool) -> void
        | (Symbol, fieldTypeLabel, Validator::anyValidatorParams, ?required: bool) -> void
        private def self.validator_for: (Symbol) -> SBOM::CycloneDX::Validator::BaseValidator[fieldValue]
        private def self.resolve_prop_kwargs:
          (:array, **untyped) -> Validator::arrayValidatorParams
        | (:boolean, **untyped) -> Validator::booleanValidatorParams
        | (:date_time, **untyped) -> Validator::dateTimeValidatorParams
        | (:email_address, **untyped) -> Validator::emailAddressValidatorParams
        | (:float, **untyped) -> Validator::floatValidatorParams
        | (:integer, **untyped) -> Validator::integerValidatorParams
        | (Class & _Klass, **untyped) -> Validator::recordValidatorParams
        | (:string, **untyped) -> Validator::stringValidatorParams
        | (:union, **untyped) -> Validator::unionValidatorParams
        | (:uri, **untyped) -> Validator::uriValidatorParams
        | (fieldTypeLabel, **untyped) -> Validator::anyValidatorParams # Should never be called
        private def self.validate_presence: (
          ::Array[Symbol] props,
          Record::presenceCheck presence,
          ?String? message
        ) -> [Array[Symbol], String?, ^(*fieldValue?) -> (bool? | String | Array[String])]
      end
    end
  end
end
