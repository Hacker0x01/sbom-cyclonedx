module SBOM
  module CycloneDX
    module Record
      class Workflow < Base
        def initialize: (bom_ref: String, uid: String, ?name: String?, ?description: String?, ?resource_references: Array[ResourceReferenceChoice]?, ?tasks: Array[Task]?, ?task_dependencies: Array[Dependency]?, ?task_types: Array[String]?, ?trigger: Trigger?, ?steps: Array[Step]?, ?inputs: Array[Input]?, ?outputs: Array[Output]?, ?time_start: dateTime?, ?time_end: dateTime?, ?workspaces: Array[Workspace]?, ?runtime_topology: Array[Dependency]?, ?properties: Array[Property]?) -> void

        @bom_ref: String
        def bom_ref: () -> String
        def bom_ref=: (String) -> String
        def bom_ref?: () -> bool
        def bom_ref_valid?: () -> bool

        @uid: String
        def uid: () -> String
        def uid=: (String) -> String
        def uid?: () -> bool
        def uid_valid?: () -> bool

        @name: String?
        def name: () -> String?
        def name=: (String?) -> String?
        def name?: () -> bool
        def name_valid?: () -> bool

        @description: String?
        def description: () -> String?
        def description=: (String?) -> String?
        def description?: () -> bool
        def description_valid?: () -> bool

        @resource_references: Array[ResourceReferenceChoice]?
        def resource_references: () -> Array[ResourceReferenceChoice]?
        def resource_references=: (Array[ResourceReferenceChoice]?) -> Array[ResourceReferenceChoice]?
        def resource_references?: () -> bool
        def resource_references_valid?: () -> bool

        @tasks: Array[Task]?
        def tasks: () -> Array[Task]?
        def tasks=: (Array[Task]?) -> Array[Task]?
        def tasks?: () -> bool
        def tasks_valid?: () -> bool

        @task_dependencies: Array[Dependency]?
        def task_dependencies: () -> Array[Dependency]?
        def task_dependencies=: (Array[Dependency]?) -> Array[Dependency]?
        def task_dependencies?: () -> bool
        def task_dependencies_valid?: () -> bool

        @task_types: Array[String]?
        def task_types: () -> Array[String]?
        def task_types=: (Array[String]?) -> Array[String]?
        def task_types?: () -> bool
        def task_types_valid?: () -> bool

        @trigger: Trigger?
        def trigger: () -> Trigger?
        def trigger=: (Trigger?) -> Trigger?
        def trigger?: () -> bool
        def trigger_valid?: () -> bool

        @steps: Array[Step]?
        def steps: () -> Array[Step]?
        def steps=: (Array[Step]?) -> Array[Step]?
        def steps?: () -> bool
        def steps_valid?: () -> bool

        @inputs: Array[Input]?
        def inputs: () -> Array[Input]?
        def inputs=: (Array[Input]?) -> Array[Input]?
        def inputs?: () -> bool
        def inputs_valid?: () -> bool

        @outputs: Array[Output]?
        def outputs: () -> Array[Output]?
        def outputs=: (Array[Output]?) -> Array[Output]?
        def outputs?: () -> bool
        def outputs_valid?: () -> bool

        @time_start: dateTime?
        def time_start: () -> dateTime?
        def time_start=: (dateTime?) -> dateTime?
        def time_start?: () -> bool
        def time_start_valid?: () -> bool

        @time_end: dateTime?
        def time_end: () -> dateTime?
        def time_end=: (dateTime?) -> dateTime?
        def time_end?: () -> bool
        def time_end_valid?: () -> bool

        @workspaces: Array[Workspace]?
        def workspaces: () -> Array[Workspace]?
        def workspaces=: (Array[Workspace]?) -> Array[Workspace]?
        def workspaces?: () -> bool
        def workspaces_valid?: () -> bool

        @runtime_topology: Array[Dependency]?
        def runtime_topology: () -> Array[Dependency]?
        def runtime_topology=: (Array[Dependency]?) -> Array[Dependency]?
        def runtime_topology?: () -> bool
        def runtime_topology_valid?: () -> bool

        @properties: Array[Property]?
        def properties: () -> Array[Property]?
        def properties=: (Array[Property]?) -> Array[Property]?
        def properties?: () -> bool
        def properties_valid?: () -> bool
      end
    end
  end
end
