module SBOM
  module CycloneDX
    module Record
      class ModelCard < Base
        class Considerations < Base
          def initialize: (?users: Array[String]?, ?use_cases: Array[String]?, ?technical_limitations: Array[String]?, ?performance_tradeoffs: Array[String]?, ?ethical_considerations: Array[Risk]?, ?environmental_considerations: EnvironmentalConsideration?, ?fairness_assessments: Array[FairnessAssessment]?) -> void

          def users: () -> Array[String]?
          def users=: (Array[String]?) -> Array[String]?
          def users?: () -> bool
          def users_valid?: () -> bool

          def use_cases: () -> Array[String]?
          def use_cases=: (Array[String]?) -> Array[String]?
          def use_cases?: () -> bool
          def use_cases_valid?: () -> bool

          def technical_limitations: () -> Array[String]?
          def technical_limitations=: (Array[String]?) -> Array[String]?
          def technical_limitations?: () -> bool
          def technical_limitations_valid?: () -> bool

          def performance_tradeoffs: () -> Array[String]?
          def performance_tradeoffs=: (Array[String]?) -> Array[String]?
          def performance_tradeoffs?: () -> bool
          def performance_tradeoffs_valid?: () -> bool

          def ethical_considerations: () -> Array[Risk]?
          def ethical_considerations=: (Array[Risk]?) -> Array[Risk]?
          def ethical_considerations?: () -> bool
          def ethical_considerations_valid?: () -> bool

          def environmental_considerations: () -> EnvironmentalConsideration?
          def environmental_considerations=: (EnvironmentalConsideration?) -> EnvironmentalConsideration?
          def environmental_considerations?: () -> bool
          def environmental_considerations_valid?: () -> bool

          def fairness_assessments: () -> Array[FairnessAssessment]?
          def fairness_assessments=: (Array[FairnessAssessment]?) -> Array[FairnessAssessment]?
          def fairness_assessments?: () -> bool
          def fairness_assessments_valid?: () -> bool
        end

        class ModelParameters < Base
          class Approach < Base
            def initialize: (?type: String?) -> void

            def type: () -> String?
            def type=: (String?) -> String?
            def type?: () -> bool
            def type_valid?: () -> bool
          end

          class DataReference < Base
            def initialize: (?ref: String?) -> void

            def ref: () -> String?
            def ref=: (String?) -> String?
            def ref?: () -> bool
            def ref_valid?: () -> bool
          end
          def initialize: (?approach: Approach?, ?task: String?, ?architecture_family: String?, ?model_architecture: String?, ?datasets: Array[ComponentData | DataReference]?, ?inputs: Array[InputOutputMLParameter]?, ?outputs: Array[InputOutputMLParameter]?) -> void

          def approach: () -> Approach?
          def approach=: (Approach?) -> Approach?
          def approach?: () -> bool
          def approach_valid?: () -> bool

          def task: () -> String?
          def task=: (String?) -> String?
          def task?: () -> bool
          def task_valid?: () -> bool

          def architecture_family: () -> String?
          def architecture_family=: (String?) -> String?
          def architecture_family?: () -> bool
          def architecture_family_valid?: () -> bool

          def model_architecture: () -> String?
          def model_architecture=: (String?) -> String?
          def model_architecture?: () -> bool
          def model_architecture_valid?: () -> bool

          def datasets: () -> (Array[ComponentData | DataReference])?
          def datasets=: (Array[ComponentData | DataReference]?) -> (Array[ComponentData | DataReference])?
          def datasets?: () -> bool
          def datasets_valid?: () -> bool

          def inputs: () -> Array[InputOutputMLParameter]?
          def inputs=: (Array[InputOutputMLParameter]?) -> Array[InputOutputMLParameter]?
          def inputs?: () -> bool
          def inputs_valid?: () -> bool

          def outputs: () -> Array[InputOutputMLParameter]?
          def outputs=: (Array[InputOutputMLParameter]?) -> Array[InputOutputMLParameter]?
          def outputs?: () -> bool
          def outputs_valid?: () -> bool
        end

        class QuantitativeAnalysis < Base
          def initialize: (?performance_metrics: Array[PerformanceMetric]?, ?graphics: GraphicsCollection?) -> void

          def performance_metrics: () -> Array[PerformanceMetric]?
          def performance_metrics=: (Array[PerformanceMetric]?) -> Array[PerformanceMetric]?
          def performance_metrics?: () -> bool
          def performance_metrics_valid?: () -> bool

          def graphics: () -> GraphicsCollection?
          def graphics=: (GraphicsCollection?) -> GraphicsCollection?
          def graphics?: () -> bool
          def graphics_valid?: () -> bool
        end

        def initialize: (?bom_ref: String?, ?model_parameters: ModelParameters?, ?quantitative_analysis: QuantitativeAnalysis?, ?considerations: Considerations?, ?properties: Array[Property]?) -> void

        def bom_ref: () -> String?
        def bom_ref=: (String?) -> String?
        def bom_ref?: () -> bool
        def bom_ref_valid?: () -> bool

        def model_parameters: () -> ModelParameters?
        def model_parameters=: (ModelParameters?) -> ModelParameters?
        def model_parameters?: () -> bool
        def model_parameters_valid?: () -> bool

        def quantitative_analysis: () -> QuantitativeAnalysis?
        def quantitative_analysis=: (QuantitativeAnalysis?) -> QuantitativeAnalysis?
        def quantitative_analysis?: () -> bool
        def quantitative_analysis_valid?: () -> bool

        def considerations: () -> Considerations?
        def considerations=: (Considerations?) -> Considerations?
        def considerations?: () -> bool
        def considerations_valid?: () -> bool

        def properties: () -> Array[Property]?
        def properties=: (Array[Property]?) -> Array[Property]?
        def properties?: () -> bool
        def properties_valid?: () -> bool
      end
    end
  end
end
