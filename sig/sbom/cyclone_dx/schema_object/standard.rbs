module SBOM
  module CycloneDX
    class Standard < ::Struct[untyped]
      def self.new: (
        ?bom_ref: String?,
        ?name: String?,
        ?version: String?,
        ?description: String?,
        ?owner: String?,
        ?requirements: Array[Requirement]?,
        ?levels: Array[Level]?,
        ?external_references: Array[ExternalReference]?,
        ?signature: signature?
      ) -> instance

      def self.[]: (
        ?bom_ref: String?,
        ?name: String?,
        ?version: String?,
        ?description: String?,
        ?owner: String?,
        ?requirements: Array[Requirement]?,
        ?levels: Array[Level]?,
        ?external_references: Array[ExternalReference]?,
        ?signature: signature?
      ) -> instance

      def self.keyword_init?: () -> true

      def self.members: () -> [ :bom_ref, :name, :version, :description, :owner, :requirements, :levels, :external_references, :signature ]

      def members: () -> [ :bom_ref, :name, :version, :description, :owner, :requirements, :levels, :external_references, :signature ]

      attr_accessor bom_ref: String?

      attr_accessor name: String?

      attr_accessor version: String?

      attr_accessor description: String?

      attr_accessor owner: String?

      attr_accessor requirements: Array[Requirement]?

      attr_accessor levels: Array[Level]?

      attr_accessor external_references: Array[ExternalReference]?

      attr_accessor signature: signature?

      include SBOM::CycloneDX::SchemaObject

      extend SBOM::CycloneDX::SchemaObject::ClassMethods

      class Level < ::Struct[untyped]
        def self.new: (
          ?bom_ref: String?,
          ?identifier: String?,
          ?title: String?,
          ?description: String?,
          ?requirements: Array[String]?,
        ) -> instance

        def self.[]: (
          ?bom_ref: String?,
          ?identifier: String?,
          ?title: String?,
          ?description: String?,
          ?requirements: Array[String]?,
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :name, :value, :description ]

        def members: () -> [ :name, :value, :description ]

        attr_accessor bom_ref: String?

        attr_accessor identifier: String?

        attr_accessor title: String?

        attr_accessor description: String?

        attr_accessor requirements: Array[String]?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end

      class Requirement < ::Struct[untyped]
        def self.new: (
          ?bom_ref: String?,
          ?identifier: String?,
          ?title: String?,
          ?text: String?,
          ?descriptions: Array[String]?,
          ?open_cre: Array[String]?,
          ?parent: String?,
          ?properties: Array[Property]?,
          ?external_references: Array[ExternalReference]?
        ) -> instance

        def self.[]: (
          ?bom_ref: String?,
          ?identifier: String?,
          ?title: String?,
          ?text: String?,
          ?descriptions: Array[String]?,
          ?open_cre: Array[String]?,
          ?parent: String?,
          ?properties: Array[Property]?,
          ?external_references: Array[ExternalReference]?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :name, :value, :description ]

        def members: () -> [ :name, :value, :description ]

        attr_accessor bom_ref: String?

        attr_accessor identifier: String?

        attr_accessor title: String?

        attr_accessor text: String?

        attr_accessor descriptions: Array[String]?

        attr_accessor open_cre: Array[String]?

        attr_accessor parent: String?

        attr_accessor properties: Array[Property]?

        attr_accessor external_references: Array[ExternalReference]?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
