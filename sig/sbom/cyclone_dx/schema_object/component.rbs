module SBOM
  module CycloneDX
    class Component < ::Struct[untyped]
      def self.new: (
        type: String,
        name: String,
        ?scope: String,
        ?mime_type: String?,
        ?bom_ref: String?,
        ?supplier: OrganizationalEntity?,
        ?manufacturer: OrganizationalEntity?,
        ?authors: Array[OrganizationalContact]?,
        ?publisher: String?,
        ?group: String?,
        ?version: String?,
        ?description: String?,
        ?hashes: Array[HashData]?,
        ?licenses: Array[licenseChoice]?,
        ?copyright: String?,
        ?cpe: String?,
        ?purl: String?,
        ?omnibor_id: Array[String]?,
        ?swhid: Array[String]?,
        ?swid: SWID?,
        ?modified: bool?,
        ?pedigree: Pedigree?,
        ?external_references: Array[ExternalReference]?,
        ?components: Array[Component]?,
        ?evidence: ComponentEvidence?,
        ?release_notes: ReleaseNotes?,
        ?model_card: ModelCard?,
        ?data: Array[ComponentData]?,
        ?crypto_properties: CryptoProperties?,
        ?properties: Array[Property]?,
        ?tags: Array[String]?,
        ?signature: signature?
      ) -> instance

      def self.[]: (
        type: String,
        name: String,
        ?scope: String,
        ?mime_type: String?,
        ?bom_ref: String?,
        ?supplier: OrganizationalEntity?,
        ?manufacturer: OrganizationalEntity?,
        ?authors: Array[OrganizationalContact]?,
        ?publisher: String?,
        ?group: String?,
        ?version: String?,
        ?description: String?,
        ?hashes: Array[HashData]?,
        ?licenses: Array[licenseChoice]?,
        ?copyright: String?,
        ?cpe: String?,
        ?purl: String?,
        ?omnibor_id: Array[String]?,
        ?swhid: Array[String]?,
        ?swid: SWID?,
        ?modified: bool?,
        ?pedigree: Pedigree?,
        ?external_references: Array[ExternalReference]?,
        ?components: Array[Component]?,
        ?evidence: ComponentEvidence?,
        ?release_notes: ReleaseNotes?,
        ?model_card: ModelCard?,
        ?data: Array[ComponentData]?,
        ?crypto_properties: CryptoProperties?,
        ?properties: Array[Property]?,
        ?tags: Array[String]?,
        ?signature: signature?
      ) -> instance

      def self.keyword_init?: () -> true

      def self.members: () -> [ :type, :mime_type, :bom_ref, :supplier, :manufacturer, :authors, :publisher, :group, :name, :version, :description, :scope, :hashes, :licenses, :copyright, :cpe, :purl, :omnibor_id, :swhid, :swid, :modified, :pedigree, :external_references, :components, :evidence, :release_notes, :model_card, :data, :crypto_properties, :properties, :tags, :signature ]

      def members: () -> [ :type, :mime_type, :bom_ref, :supplier, :manufacturer, :authors, :publisher, :group, :name, :version, :description, :scope, :hashes, :licenses, :copyright, :cpe, :purl, :omnibor_id, :swhid, :swid, :modified, :pedigree, :external_references, :components, :evidence, :release_notes, :model_card, :data, :crypto_properties, :properties, :tags, :signature ]

      def initialize: (
        type: String,
        name: String,
        ?scope: String,
        ?mime_type: String?,
        ?bom_ref: String?,
        ?supplier: OrganizationalEntity?,
        ?manufacturer: OrganizationalEntity?,
        ?authors: Array[OrganizationalContact]?,
        ?publisher: String?,
        ?group: String?,
        ?version: String?,
        ?description: String?,
        ?hashes: Array[HashData]?,
        ?licenses: Array[licenseChoice]?,
        ?copyright: String?,
        ?cpe: String?,
        ?purl: String?,
        ?omnibor_id: Array[String]?,
        ?swhid: Array[String]?,
        ?swid: SWID?,
        ?modified: bool?,
        ?pedigree: Pedigree?,
        ?external_references: Array[ExternalReference]?,
        ?components: Array[Component]?,
        ?evidence: ComponentEvidence?,
        ?release_notes: ReleaseNotes?,
        ?model_card: ModelCard?,
        ?data: Array[ComponentData]?,
        ?crypto_properties: CryptoProperties?,
        ?properties: Array[Property]?,
        ?tags: Array[String]?,
        ?signature: signature?
      ) -> void

      attr_accessor type: String

      attr_accessor mime_type: String?

      attr_accessor bom_ref: String?

      attr_accessor supplier: OrganizationalEntity?

      attr_accessor manufacturer: OrganizationalEntity?

      attr_accessor authors: OrganizationalContact?

      attr_accessor publisher: String?

      attr_accessor group: String?

      attr_accessor name: String

      attr_accessor version: String?

      attr_accessor description: String?

      attr_accessor scope: String

      attr_accessor hashes: Array[HashData]?

      attr_accessor licenses: Array[LicenseChoice]?

      attr_accessor copyright: String?

      attr_accessor cpe: String?

      attr_accessor purl: String?

      attr_accessor omnibor_id: Array[String]?

      attr_accessor swhid: Array[String]?

      attr_accessor swid: SWID?

      attr_accessor modified: bool?

      attr_accessor pedigree: Pedigree?

      attr_accessor external_references: Array[ExternalReference]?

      attr_accessor components: Array[Component]?

      attr_accessor evidence: ComponentEvidence?

      attr_accessor release_notes: ReleaseNotes?

      attr_accessor model_card: ModelCard?

      attr_accessor data: Array[ComponentData]?

      attr_accessor crypto_properties: CryptoProperties?

      attr_accessor properties: Array[Property]?

      attr_accessor tags: Array[String]?

      attr_accessor signature: signature?

      include SBOM::CycloneDX::SchemaObject

      extend SBOM::CycloneDX::SchemaObject::ClassMethods

      class Pedigree < ::Struct[untyped]
        def self.new: (
          ?ancestors: Array[Component]?,
          ?descendants: Array[Component]?,
          ?variants: Array[Component]?,
          ?commits: Array[Commit]?,
          ?patches: Array[Patch]?,
          ?notes: String?
        ) -> instance

        def self.[]: (
          ?ancestors: Array[Component]?,
          ?descendants: Array[Component]?,
          ?variants: Array[Component]?,
          ?commits: Array[Commit]?,
          ?patches: Array[Patch]?,
          ?notes: String?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :ancestors, :descendants, :variants, :commits, :patches, :notes ]

        def members: () -> [ :ancestors, :descendants, :variants, :commits, :patches, :notes ]

        attr_accessor ancestors: Array[Component]?

        attr_accessor descendants: Array[Component]?

        attr_accessor variants: Array[Component]?

        attr_accessor commits: Array[Commit]?

        attr_accessor patches: Array[Patch]?

        attr_accessor notes: String?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
