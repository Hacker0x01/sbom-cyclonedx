module SBOM
  module CycloneDX
    class ComponentIdentityEvidence < ::Struct[untyped]
      def self.new: (
        field: String,
        ?confidence: Float?,
        ?concluded_value: String?,
        ?methods_used: Array[Method]?,
        ?tools: Array[String]?
      ) -> instance

      def self.[]: (
        field: String,
        ?confidence: Float?,
        ?concluded_value: String?,
        ?methods_used: Array[Method]?,
        ?tools: Array[String]?
      ) -> instance

      def self.keyword_init?: () -> true

      def self.members: () -> [ :field, :confidence, :concluded_value, :methods_used, :tools ]

      def members: () -> [ :field, :confidence, :concluded_value, :methods_used, :tools ]

      def initialize: (
        field: String,
        ?confidence: Float?,
        ?concluded_value: String?,
        ?methods_used: Array[Method]?,
        ?tools: Array[String]?
      ) -> void

      attr_accessor field: String

      attr_accessor confidence: Float?

      attr_accessor concluded_value: String?

      attr_accessor methods_used: Array[Method]?

      attr_accessor tools: Array[String]?

      include SBOM::CycloneDX::SchemaObject

      extend SBOM::CycloneDX::SchemaObject::ClassMethods

      class Method < ::Struct[untyped]
        def self.new: (
          ?technique: String,
          ?confidence: Float,
          ?value: String?
        ) -> instance

        def self.[]: (
          ?technique: String,
          ?confidence: Float,
          ?value: String?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :technique, :confidence, :value ]

        def members: () -> [ :technique, :confidence, :value ]

        def initialize: (technique: String, confidence: Float, ?value: String?) -> void

        attr_accessor technique: String

        attr_accessor confidence: Float

        attr_accessor value: String?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
