module SBOM
  module CycloneDX
    class Declarations < ::Struct[untyped]
      def self.new: (
        ?assessors: Array[Assessor]?,
        ?attestations: Array[Attestation]?,
        ?claims: Array[Claim]?,
        ?evidence: Array[Evidence]?,
        ?targets: Array[Target]?,
        ?affirmation: Affirmation?,
        ?signature: signature?
      ) -> instance

      def self.[]: (
        ?assessors: Array[Assessor]?,
        ?attestations: Array[Attestation]?,
        ?claims: Array[Claim]?,
        ?evidence: Array[Evidence]?,
        ?targets: Array[Target]?,
        ?affirmation: Affirmation?,
        ?signature: signature?
      ) -> instance

      def self.keyword_init?: () -> true

      def self.members: () -> [ :assessors, :attestations, :claims, :evidence, :targets, :affirmation, :signature ]

      def members: () -> [ :assessors, :attestations, :claims, :evidence, :targets, :affirmation, :signature ]

      attr_accessor assessors: Array[Assessor]?

      attr_accessor attestations: Array[Attestation]?

      attr_accessor claims: Array[Claim]?

      attr_accessor evidence: Array[Evidence]?

      attr_accessor targets: Array[Target]?

      attr_accessor affirmation: Affirmation?

      attr_accessor signature: signature?

      include SBOM::CycloneDX::SchemaObject

      extend SBOM::CycloneDX::SchemaObject::ClassMethods

      class Affirmation < ::Struct[untyped]
        def self.new: (
          ?statement: String?,
          ?signatories: Array[Signatory]?,
          ?signature: signature?
        ) -> instance

        def self.[]: (
          ?statement: String?,
          ?signatories: Array[Signatory]?,
          ?signature: signature?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :statement, :signatories, :signature ]

        def members: () -> [ :statement, :signatories, :signature ]

        attr_accessor statement: String?

        attr_accessor signatories: Array[Signatory]?

        attr_accessor signature: signature?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods

        class Signatory < ::Struct[untyped]
          def self.new: (
            signature: signature,
            ?name: String?,
            ?role: String?,
            ?organization: OrganizationalEntity?,
            ?external_reference: ExternalReference?
          ) -> instance | (
            organization: OrganizationalEntity,
            external_reference: ExternalReference,
            ?name: String?,
            ?role: String?,
            ?signature: signature?
          )  -> instance

          def self.[]: (
            signature: signature,
            ?name: String?,
            ?role: String?,
            ?organization: OrganizationalEntity?,
            ?external_reference: ExternalReference?
          ) -> instance | (
            organization: OrganizationalEntity,
            external_reference: ExternalReference,
            ?name: String?,
            ?role: String?,
            ?signature: signature?
          )  -> instance

          def self.keyword_init?: () -> true

          def self.members: () -> [ :name, :role, :signature, :organization, :external_reference ]

          def members: () -> [ :name, :role, :signature, :organization, :external_reference ]

          def initialize: (
            signature: signature,
            ?name: String?,
            ?role: String?,
            ?organization: OrganizationalEntity?,
            ?external_reference: ExternalReference?
          ) -> void | (
            organization: OrganizationalEntity,
            external_reference: ExternalReference,
            ?name: String?,
            ?role: String?,
            ?signature: signature?
          )  -> void

          attr_accessor name: String?

          attr_accessor role: String?

          attr_accessor signature: signature?

          attr_accessor organization: OrganizationalEntity?

          attr_accessor external_reference: ExternalReference?

          include SBOM::CycloneDX::SchemaObject

          extend SBOM::CycloneDX::SchemaObject::ClassMethods
        end
      end

      class Assessor < ::Struct[untyped]
        def self.new: (
          ?bom_ref: String?,
          ?third_party: bool?,
          ?organization: OrganizationalEntity?
        ) -> instance

        def self.[]:(
          ?bom_ref: String?,
          ?third_party: bool?,
          ?organization: OrganizationalEntity?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :bom_ref, :third_party, :organization ]

        def members: () -> [ :bom_ref, :third_party, :organization ]

        attr_accessor bom_ref: String?

        attr_accessor third_party: bool?

        attr_accessor organization: OrganizationalEntity?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end

      class Attestation < ::Struct[untyped]
        def self.new: (
          ?summary: String?,
          ?assessor: String?,
          ?requirements_map: Array[Map]?,
          ?signature: signature?
        ) -> instance

        def self.[]: (
          ?summary: String?,
          ?assessor: String?,
          ?requirements_map: Array[Map]?,
          ?signature: signature?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :summary, :assessor, :requirements_map, :signature ]

        def members: () -> [ :summary, :assessor, :requirements_map, :signature ]

        attr_accessor summary: String?

        attr_accessor assessor: String?

        attr_accessor requirements_map: Array[Map]?

        attr_accessor signature: signature?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods

        class Map < ::Struct[untyped]
          def self.new: (
            ?requirement: String?,
            ?claims: Array[String]?,
            ?counter_claims: Array[String]?,
            ?conformance: Conformance?,
            ?confidence: Confidence?
          ) -> instance

          def self.[]: (?requirement: untyped, ?claims: untyped, ?counter_claims: untyped, ?conformance: untyped, ?confidence: untyped) -> instance

          def self.keyword_init?: () -> true

          def self.members: () -> [ :requirement, :claims, :counter_claims, :conformance, :confidence ]

          def members: () -> [ :requirement, :claims, :counter_claims, :conformance, :confidence ]

          attr_accessor requirement: untyped

          attr_accessor claims: untyped

          attr_accessor counter_claims: untyped

          attr_accessor conformance: untyped

          attr_accessor confidence: untyped

          include SBOM::CycloneDX::SchemaObject

          extend SBOM::CycloneDX::SchemaObject::ClassMethods

          class Confidence < ::Struct[untyped]
            def self.new: (
              ?score: Float?,
              ?rationale: String?
            ) -> instance

            def self.[]: (
              ?score: Float?,
              ?rationale: String?
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :score, :rationale ]

            def members: () -> [ :score, :rationale ]

            attr_accessor score: Float?

            attr_accessor rationale: String?

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end

          class Conformance < ::Struct[untyped]
            def self.new: (
              ?score: Float?,
              ?rationale: String?,
              ?mitigation_strategies: Array[String]?
            ) -> instance

            def self.[]: (
              ?score: Float?,
              ?rationale: String?,
              ?mitigation_strategies: Array[String]?
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :score, :rationale, :mitigation_strategies ]

            def members: () -> [ :score, :rationale, :mitigation_strategies ]

            attr_accessor score: Float?

            attr_accessor rationale: String?

            attr_accessor mitigation_strategies: Array[String]?

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end
        end
      end

      class Claim < ::Struct[untyped]
        def self.new: (
          ?bom_ref: String?,
          ?target: String?,
          ?predicate: String?,
          ?mitigation_strategies: Array[String]?,
          ?reasoning: String?,
          ?evidence: Array[String]?,
          ?counter_evidence: Array[String]?,
          ?external_references: Array[ExternalReference]?,
          ?signature: signature?
        ) -> instance

        def self.[]: (
          ?bom_ref: String?,
          ?target: String?,
          ?predicate: String?,
          ?mitigation_strategies: Array[String]?,
          ?reasoning: String?,
          ?evidence: Array[String]?,
          ?counter_evidence: Array[String]?,
          ?external_references: Array[ExternalReference]?,
          ?signature: signature?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :bom_ref, :target, :predicate, :mitigation_strategies, :reasoning, :evidence, :counter_evidence, :external_references, :signature ]

        def members: () -> [ :bom_ref, :target, :predicate, :mitigation_strategies, :reasoning, :evidence, :counter_evidence, :external_references, :signature ]

        attr_accessor bom_ref: String?

        attr_accessor target: String?

        attr_accessor predicate: String?

        attr_accessor mitigation_strategies: Array[String]?

        attr_accessor reasoning: String?

        attr_accessor evidence: Array[String]?

        attr_accessor counter_evidence: Array[String]?

        attr_accessor external_references: Array[ExternalReference]?

        attr_accessor signature: signature?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end

      class Evidence < ::Struct[untyped]
        def self.new: (
          ?bom_ref: String?,
          ?property_name: String?,
          ?description: String?,
          ?data: Array[EvidenceData]?,
          ?created: DateTime?,
          ?expires: DateTime?,
          ?author: OrganizationalContact?,
          ?reviewer: OrganizationalContact?,
          ?signature: signature?
        ) -> instance

        def self.[]: (
          ?bom_ref: String?,
          ?property_name: String?,
          ?description: String?,
          ?data: Array[EvidenceData]?,
          ?created: DateTime?,
          ?expires: DateTime?,
          ?author: OrganizationalContact?,
          ?reviewer: OrganizationalContact?,
          ?signature: signature?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :bom_ref, :property_name, :description, :data, :created, :expires, :author, :reviewer, :signature ]

        def members: () -> [ :bom_ref, :property_name, :description, :data, :created, :expires, :author, :reviewer, :signature ]

        attr_accessor bom_ref: String?

        attr_accessor property_name: String?

        attr_accessor description: String?

        attr_accessor data: Array[EvidenceData]?

        attr_accessor created: DateTime?

        attr_accessor expires: DateTime?

        attr_accessor author: OrganizationalContact?

        attr_accessor reviewer: OrganizationalContact?

        attr_accessor signature: signature?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods

        class EvidenceData < ::Struct[untyped]
          def self.new: (
            ?name: String?,
            ?contents: Contents?,
            ?classification: String?,
            ?sensitive_data: Array[String]?,
            ?governance: DataGovernance?
          ) -> instance

          def self.[]: (
            ?name: String?,
            ?contents: Contents?,
            ?classification: String?,
            ?sensitive_data: Array[String]?,
            ?governance: DataGovernance?
          ) -> instance

          def self.keyword_init?: () -> true

          def self.members: () -> [ :name, :contents, :classification, :sensitive_data, :governance ]

          def members: () -> [ :name, :contents, :classification, :sensitive_data, :governance ]

          attr_accessor name: String?

          attr_accessor contents: Contents?

          attr_accessor classification: String?

          attr_accessor sensitive_data: Array[String]?

          attr_accessor governance: DataGovernance?

          include SBOM::CycloneDX::SchemaObject

          extend SBOM::CycloneDX::SchemaObject::ClassMethods

          class Contents < ::Struct[untyped]
            def self.new: (
              ?attachment: Attachment?,
              ?url: uriString?
            ) -> instance

            def self.[]: (
              ?attachment: Attachment?,
              ?url: uriString?
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :attachment, :url ]

            def members: () -> [ :attachment, :url ]

            attr_accessor attachment: Attachment?

            attr_accessor url: uriString?

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end
        end
      end

      class Target < ::Struct[untyped]
        def self.new: (
          ?organizations: Array[OrganizationalEntity]?,
          ?components: Array[Component]?,
          ?services: Array[Service]?
        ) -> instance

        def self.[]: (
          ?organizations: Array[OrganizationalEntity]?,
          ?components: Array[Component]?,
          ?services: Array[Service]?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :organizations, :components, :services ]

        def members: () -> [ :organizations, :components, :services ]

        attr_accessor organizations: Array[OrganizationalEntity]?

        attr_accessor components: Array[Component]?

        attr_accessor services: Array[Service]?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
