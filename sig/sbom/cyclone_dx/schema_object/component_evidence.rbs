module SBOM
  module CycloneDX
    class ComponentEvidence < ::Struct[untyped]
      def self.new: (
        ?identity: Array[ComponentIdentityEvidence]?,
        ?occurrences: Array[Occurrence]?,
        ?callstack: Callstack?,
        ?licenses: Array[licenseChoice]?,
        ?copyright: Array[Copyright]?
      ) -> instance

      def self.[]: (
        ?identity: Array[ComponentIdentityEvidence]?,
        ?occurrences: Array[Occurrence]?,
        ?callstack: Callstack?,
        ?licenses: Array[licenseChoice]?,
        ?copyright: Array[Copyright]?
      ) -> instance

      def self.keyword_init?: () -> true

      def self.members: () -> [ :identity, :occurrences, :callstack, :licenses, :copyright ]

      def members: () -> [ :identity, :occurrences, :callstack, :licenses, :copyright ]

      attr_accessor identity: Array[ComponentIdentityEvidence]?

      attr_accessor occurrences: Array[Occurrence]?

      attr_accessor callstack: Callstack?

      attr_accessor licenses: Array[licenseChoice]?

      attr_accessor copyright: Array[Copyright]?

      include SBOM::CycloneDX::SchemaObject

      extend SBOM::CycloneDX::SchemaObject::ClassMethods

      class Callstack < ::Struct[untyped]
        def self.new: (?frames: Array[Frame]?) -> instance

        def self.[]: (?frames: Array[Frame]?) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :frames ]

        def members: () -> [ :frames ]

        attr_accessor frames: Array[Frame]?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods

        class Frame < ::Struct[untyped]
          def self.new: (
            ?package: String?,
            ?module: String?,
            ?function: String?,
            ?parameters: Array[String]?,
            ?line: Integer?,
            ?column: Integer?,
            ?full_filename: String?
          ) -> instance

          def self.[]: (
            ?package: String?,
            ?module: String?,
            ?function: String?,
            ?parameters: Array[String]?,
            ?line: Integer?,
            ?column: Integer?,
            ?full_filename: String?
          ) -> instance

          def self.keyword_init?: () -> true

          def self.members: () -> [ :package, :module, :function, :parameters, :line, :column, :full_filename ]

          def members: () -> [ :package, :module, :function, :parameters, :line, :column, :full_filename ]

          attr_accessor package: String?

          attr_accessor module: String?

          attr_accessor function: String?

          attr_accessor parameters: Array[String]?

          attr_accessor line: Integer?

          attr_accessor column: Integer?

          attr_accessor full_filename: String?

          include SBOM::CycloneDX::SchemaObject

          extend SBOM::CycloneDX::SchemaObject::ClassMethods
        end
      end

      class Occurrence < ::Struct[untyped]
        def self.new: (
          location: String,
          ?bom_ref: String?,
          ?line: Integer?,
          ?offset: Integer?,
          ?symbol: String?,
          ?additional_context: String?
        ) -> instance

        def self.[]: (
          location: String,
          ?bom_ref: String?,
          ?line: Integer?,
          ?offset: Integer?,
          ?symbol: String?,
          ?additional_context: String?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :bom_ref, :location, :line, :offset, :symbol, :additional_context ]

        def members: () -> [ :bom_ref, :location, :line, :offset, :symbol, :additional_context ]

        def initialize: (
          location: String,
          ?bom_ref: String?,
          ?line: Integer?,
          ?offset: Integer?,
          ?symbol: String?,
          ?additional_context: String?
        ) -> void

        attr_accessor bom_ref: String?

        attr_accessor location: String

        attr_accessor line: Integer?

        attr_accessor offset: Integer?

        attr_accessor symbol: String?

        attr_accessor additional_context: String?

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
