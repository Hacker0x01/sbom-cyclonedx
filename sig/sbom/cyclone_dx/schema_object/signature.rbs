module SBOM
  module CycloneDX
    type publicKey = Signature::JSFSignature::PublicKey::EC |
                     Signature::JSFSignature::PublicKey::OKP |
                     Signature::JSFSignature::PublicKey::RSA
    type signature = Signature::JSFSignature |
                     Signature::SignatureChain |
                     Signature::SignerList

    # TODO: Add proper types

    module Signature
      def self.valid?: (untyped, ?required: bool) -> bool

      class JSFSignature < ::Struct[untyped]
        include SchemaObject
        extend SchemaObject::ClassMethods

        def self.new: (
          algorithm: uriString | String,
          value: String,
          ?key_id: String?,
          ?public_key: publicKey?,
          ?certificate_path: Array[String]?,
          ?excludes: Array[String]?
        ) -> instance

        def self.[]: (
          algorithm: uriString | String,
          value: String,
          ?key_id: String?,
          ?public_key: publicKey?,
          ?certificate_path: Array[String]?,
          ?excludes: Array[String]?
        ) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :algorithm, :key_id, :public_key, :certificate_path, :excludes, :value ]

        def members: () -> [ :algorithm, :key_id, :public_key, :certificate_path, :excludes, :value ]

        def initialize: (
          algorithm: uriString | String,
          value: String,
          ?key_id: String?,
          ?public_key: publicKey?,
          ?certificate_path: Array[String]?,
          ?excludes: Array[String]?
        ) -> void

        attr_accessor algorithm: uriString | String

        attr_accessor key_id: String?

        attr_accessor public_key: publicKey?

        attr_accessor certificate_path: Array[String]?

        attr_accessor excludes: Array[String]?

        attr_accessor value: String

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods

        module PublicKey
          def self.new:
            (kty: "EC", crv: String, x: String, y: String) -> EC |
            (kty: "OKP", crv: String, x: String) -> OKP |
            (kty: "RSA", n: String, e: String) -> RSA


          def self.valid?: (untyped object, **untyped) -> bool

          class EC < ::Struct[untyped]
            def self.new: (
              crv: String,
              x: String,
              y: String
            ) -> instance

            def self.[]: (
              crv: String,
              x: String,
              y: String
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :kty, :crv, :x, :y ]

            def members: () -> [ :kty, :crv, :x, :y ]

            def initialize: (
              crv: String,
              x: String,
              y: String
            ) -> void

            attr_reader kty: "EC"

            attr_accessor crv: String

            attr_accessor x: String

            attr_accessor y: String

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end

          class OKP < ::Struct[untyped]
            def self.new: (
              crv: String,
              x: String
            ) -> instance

            def self.[]: (
              crv: String,
              x: String
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :kty, :crv, :x ]

            def members: () -> [ :kty, :crv, :x ]

            def initialize: (
              crv: String,
              x: String
            ) -> void

            attr_reader kty: "OKP"

            attr_accessor crv: String

            attr_accessor x: String

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end

          class RSA < ::Struct[untyped]
            def self.new: (
              n: String,
              e: String
            ) -> instance

            def self.[]: (
              n: String,
              e: String
            ) -> instance

            def self.keyword_init?: () -> true

            def self.members: () -> [ :kty, :n, :e ]

            def members: () -> [ :kty, :n, :e ]

            def initialize: (
              n: String,
              e: String
            ) -> void

            attr_reader kty: "RSA"

            attr_accessor n: String

            attr_accessor e: String

            include SBOM::CycloneDX::SchemaObject

            extend SBOM::CycloneDX::SchemaObject::ClassMethods
          end
        end
      end

      class SignatureChain < ::Struct[untyped]
        def self.new: (?signatures: Array[JSFSignature]) -> instance

        def self.[]: (?signatures: Array[JSFSignature]) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :signatures ]

        def members: () -> [ :signatures ]

        attr_accessor signatures: Array[JSFSignature]

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end

      class SignerList < ::Struct[untyped]
        def self.new: (?signers: Array[JSFSignature]) -> instance

        def self.[]: (?signers: Array[JSFSignature]) -> instance

        def self.keyword_init?: () -> true

        def self.members: () -> [ :signers ]

        def members: () -> [ :signers ]

        attr_accessor signers: Array[JSFSignature]

        include SBOM::CycloneDX::SchemaObject

        extend SBOM::CycloneDX::SchemaObject::ClassMethods
      end
    end
  end
end
